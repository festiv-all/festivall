create type "public"."order_status" as enum ('completed', 'onprocess', 'failed', 'canceled', 'refunded');

create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "allow_multiple" boolean not null default false,
    "description" text,
    "event_id" uuid not null,
    "title_en" text,
    "display_order" smallint not null,
    "is_activate" boolean not null default true
);


alter table "public"."categories" enable row level security;

create table "public"."events" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "venue" text not null,
    "date_start" timestamp without time zone not null,
    "date_end" timestamp without time zone not null,
    "activate_from" timestamp with time zone not null,
    "activate_until" timestamp with time zone not null,
    "organizer_id" uuid,
    "link_facebook" text,
    "link_instagram" text,
    "link_youtube" text,
    "homepage" text,
    "description" text,
    "image_url" text
);


alter table "public"."events" enable row level security;

create table "public"."order_details" (
    "id" text not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "payment_id" uuid,
    "total" integer,
    "status" order_status default 'onprocess'::order_status,
    "orderId" uuid default gen_random_uuid()
);


alter table "public"."order_details" enable row level security;

create table "public"."order_items" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "product_id" uuid,
    "user_id" uuid,
    "quantity" integer
);


alter table "public"."order_items" enable row level security;

create table "public"."organizer_info" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "rep_name" text not null,
    "corp_name" text,
    "phone" text,
    "address" text,
    "avatar_url" text,
    "provider" text,
    "email" text,
    "corp_number" integer,
    "user_id" uuid default gen_random_uuid()
);


alter table "public"."organizer_info" enable row level security;

create table "public"."payment_details" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "order_id" uuid,
    "status" text,
    "method" text,
    "provider" text
);


alter table "public"."payment_details" enable row level security;

create table "public"."products" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "price" double precision not null,
    "image_url" text,
    "event_id" uuid not null,
    "category_id" bigint,
    "max_quantity" integer not null,
    "title_en" text,
    "activate_from" timestamp with time zone not null default now(),
    "sub_category_id" bigint
);


alter table "public"."products" enable row level security;

create table "public"."sub_categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "category_id" integer not null,
    "event_id" uuid not null,
    "title_en" text,
    "description" text,
    "display_order" integer not null,
    "is_activate" boolean not null default true,
    "allow_multiple" boolean not null default false
);


alter table "public"."sub_categories" enable row level security;

create table "public"."ticket_details" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "order_item_id" uuid,
    "product_id" uuid,
    "event_id" uuid,
    "attendee_name" text,
    "attendee_email" text,
    "attendee_phone" text,
    "attendee_nickname" text,
    "attendee_en_name" text
);


alter table "public"."ticket_details" enable row level security;

create table "public"."users" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "email" text not null,
    "name" text not null,
    "nickname" text,
    "username_en" text,
    "avatar_url" text,
    "phone" text,
    "provider" text,
    "community" text,
    "is_organizer" boolean default false
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX events_pkey ON public.events USING btree (id);

CREATE UNIQUE INDEX events_title_key ON public.events USING btree (title);

CREATE UNIQUE INDEX order_details_pkey ON public.order_details USING btree (id);

CREATE UNIQUE INDEX order_items_pkey ON public.order_items USING btree (id);

CREATE UNIQUE INDEX organizers_pkey ON public.organizer_info USING btree (id);

CREATE UNIQUE INDEX payment_details_pkey ON public.payment_details USING btree (id);

CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id);

CREATE UNIQUE INDEX sub_categories_pkey ON public.sub_categories USING btree (id);

CREATE UNIQUE INDEX ticket_details_pkey ON public.ticket_details USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."events" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."order_details" add constraint "order_details_pkey" PRIMARY KEY using index "order_details_pkey";

alter table "public"."order_items" add constraint "order_items_pkey" PRIMARY KEY using index "order_items_pkey";

alter table "public"."organizer_info" add constraint "organizers_pkey" PRIMARY KEY using index "organizers_pkey";

alter table "public"."payment_details" add constraint "payment_details_pkey" PRIMARY KEY using index "payment_details_pkey";

alter table "public"."products" add constraint "products_pkey" PRIMARY KEY using index "products_pkey";

alter table "public"."sub_categories" add constraint "sub_categories_pkey" PRIMARY KEY using index "sub_categories_pkey";

alter table "public"."ticket_details" add constraint "ticket_details_pkey" PRIMARY KEY using index "ticket_details_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."categories" add constraint "categories_event_belongs_to_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."categories" validate constraint "categories_event_belongs_to_fkey";

alter table "public"."events" add constraint "events_organizer_id_fkey" FOREIGN KEY (organizer_id) REFERENCES organizer_info(id) ON DELETE SET NULL not valid;

alter table "public"."events" validate constraint "events_organizer_id_fkey";

alter table "public"."events" add constraint "events_title_key" UNIQUE using index "events_title_key";

alter table "public"."order_details" add constraint "order_details_payment_id_fkey" FOREIGN KEY (payment_id) REFERENCES payment_details(id) ON DELETE SET NULL not valid;

alter table "public"."order_details" validate constraint "order_details_payment_id_fkey";

alter table "public"."order_details" add constraint "order_details_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL not valid;

alter table "public"."order_details" validate constraint "order_details_user_id_fkey";

alter table "public"."order_items" add constraint "order_items_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE SET NULL not valid;

alter table "public"."order_items" validate constraint "order_items_product_id_fkey";

alter table "public"."order_items" add constraint "order_items_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL not valid;

alter table "public"."order_items" validate constraint "order_items_user_id_fkey";

alter table "public"."payment_details" add constraint "payment_details_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL not valid;

alter table "public"."payment_details" validate constraint "payment_details_user_id_fkey";

alter table "public"."products" add constraint "products_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."products" validate constraint "products_category_id_fkey";

alter table "public"."products" add constraint "products_event_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."products" validate constraint "products_event_fkey";

alter table "public"."products" add constraint "products_sub_category_id_fkey" FOREIGN KEY (sub_category_id) REFERENCES sub_categories(id) ON DELETE SET NULL not valid;

alter table "public"."products" validate constraint "products_sub_category_id_fkey";

alter table "public"."sub_categories" add constraint "sub_categories_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."sub_categories" validate constraint "sub_categories_category_id_fkey";

alter table "public"."sub_categories" add constraint "sub_categories_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."sub_categories" validate constraint "sub_categories_event_id_fkey";

alter table "public"."ticket_details" add constraint "ticket_details_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE SET NULL not valid;

alter table "public"."ticket_details" validate constraint "ticket_details_event_id_fkey";

alter table "public"."ticket_details" add constraint "ticket_details_order_item_id_fkey" FOREIGN KEY (order_item_id) REFERENCES order_items(id) ON DELETE SET NULL not valid;

alter table "public"."ticket_details" validate constraint "ticket_details_order_item_id_fkey";

alter table "public"."ticket_details" add constraint "ticket_details_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE SET NULL not valid;

alter table "public"."ticket_details" validate constraint "ticket_details_product_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_user_on_signup()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    INSERT INTO public.users (id,email,name,avatar_url,provider)
    VALUES (
      NEW.id,
      NEW.raw_user_meta_data ->>'email',
      NEW.raw_user_meta_data ->>'name',
      NEW.raw_user_meta_data ->>'avatar_url',
      NEW.raw_app_meta_data ->>'provider'
    );

    RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.delete_user()
 RETURNS void
 LANGUAGE sql
 SECURITY DEFINER
AS $function$DELETE FROM auth.users WHERE id = auth.uid();$function$
;

CREATE OR REPLACE FUNCTION public.generate_custom_order_id()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    current_date_str TEXT;
    new_id TEXT;
    random_suffix TEXT;
    current_millis BIGINT;
    millis_suffix TEXT;
BEGIN
    -- 현재 날짜를 KST 기준으로 가져오기 (YYYYMMDD 형식)
    current_date_str := to_char(now() AT TIME ZONE 'Asia/Seoul', 'YYYYMMDD');

    -- 현재 시간을 밀리초로 변환
    current_millis := (extract(epoch from now() AT TIME ZONE 'Asia/Seoul') * 1000)::BIGINT;

    -- Date.now()의 앞 4자리를 제외한 나머지 9자리 숫자
    millis_suffix := (current_millis % 1000000000)::TEXT;  -- 마지막 9자리 사용

    -- 무작위 숫자 생성 (0부터 99까지)
    random_suffix := LPAD(floor(random() * 100)::TEXT, 2, '0');

    -- 최종 ID 생성 (날짜 + 밀리초의 마지막 9자리 + 무작위 숫자)
    new_id := current_date_str || millis_suffix || random_suffix;

    -- 새로운 ID를 NEW.id에 설정
    NEW.id := new_id;

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."events" to "anon";

grant insert on table "public"."events" to "anon";

grant references on table "public"."events" to "anon";

grant select on table "public"."events" to "anon";

grant trigger on table "public"."events" to "anon";

grant truncate on table "public"."events" to "anon";

grant update on table "public"."events" to "anon";

grant delete on table "public"."events" to "authenticated";

grant insert on table "public"."events" to "authenticated";

grant references on table "public"."events" to "authenticated";

grant select on table "public"."events" to "authenticated";

grant trigger on table "public"."events" to "authenticated";

grant truncate on table "public"."events" to "authenticated";

grant update on table "public"."events" to "authenticated";

grant delete on table "public"."events" to "service_role";

grant insert on table "public"."events" to "service_role";

grant references on table "public"."events" to "service_role";

grant select on table "public"."events" to "service_role";

grant trigger on table "public"."events" to "service_role";

grant truncate on table "public"."events" to "service_role";

grant update on table "public"."events" to "service_role";

grant delete on table "public"."order_details" to "anon";

grant insert on table "public"."order_details" to "anon";

grant references on table "public"."order_details" to "anon";

grant select on table "public"."order_details" to "anon";

grant trigger on table "public"."order_details" to "anon";

grant truncate on table "public"."order_details" to "anon";

grant update on table "public"."order_details" to "anon";

grant delete on table "public"."order_details" to "authenticated";

grant insert on table "public"."order_details" to "authenticated";

grant references on table "public"."order_details" to "authenticated";

grant select on table "public"."order_details" to "authenticated";

grant trigger on table "public"."order_details" to "authenticated";

grant truncate on table "public"."order_details" to "authenticated";

grant update on table "public"."order_details" to "authenticated";

grant delete on table "public"."order_details" to "service_role";

grant insert on table "public"."order_details" to "service_role";

grant references on table "public"."order_details" to "service_role";

grant select on table "public"."order_details" to "service_role";

grant trigger on table "public"."order_details" to "service_role";

grant truncate on table "public"."order_details" to "service_role";

grant update on table "public"."order_details" to "service_role";

grant delete on table "public"."order_items" to "anon";

grant insert on table "public"."order_items" to "anon";

grant references on table "public"."order_items" to "anon";

grant select on table "public"."order_items" to "anon";

grant trigger on table "public"."order_items" to "anon";

grant truncate on table "public"."order_items" to "anon";

grant update on table "public"."order_items" to "anon";

grant delete on table "public"."order_items" to "authenticated";

grant insert on table "public"."order_items" to "authenticated";

grant references on table "public"."order_items" to "authenticated";

grant select on table "public"."order_items" to "authenticated";

grant trigger on table "public"."order_items" to "authenticated";

grant truncate on table "public"."order_items" to "authenticated";

grant update on table "public"."order_items" to "authenticated";

grant delete on table "public"."order_items" to "service_role";

grant insert on table "public"."order_items" to "service_role";

grant references on table "public"."order_items" to "service_role";

grant select on table "public"."order_items" to "service_role";

grant trigger on table "public"."order_items" to "service_role";

grant truncate on table "public"."order_items" to "service_role";

grant update on table "public"."order_items" to "service_role";

grant delete on table "public"."organizer_info" to "anon";

grant insert on table "public"."organizer_info" to "anon";

grant references on table "public"."organizer_info" to "anon";

grant select on table "public"."organizer_info" to "anon";

grant trigger on table "public"."organizer_info" to "anon";

grant truncate on table "public"."organizer_info" to "anon";

grant update on table "public"."organizer_info" to "anon";

grant delete on table "public"."organizer_info" to "authenticated";

grant insert on table "public"."organizer_info" to "authenticated";

grant references on table "public"."organizer_info" to "authenticated";

grant select on table "public"."organizer_info" to "authenticated";

grant trigger on table "public"."organizer_info" to "authenticated";

grant truncate on table "public"."organizer_info" to "authenticated";

grant update on table "public"."organizer_info" to "authenticated";

grant delete on table "public"."organizer_info" to "service_role";

grant insert on table "public"."organizer_info" to "service_role";

grant references on table "public"."organizer_info" to "service_role";

grant select on table "public"."organizer_info" to "service_role";

grant trigger on table "public"."organizer_info" to "service_role";

grant truncate on table "public"."organizer_info" to "service_role";

grant update on table "public"."organizer_info" to "service_role";

grant delete on table "public"."payment_details" to "anon";

grant insert on table "public"."payment_details" to "anon";

grant references on table "public"."payment_details" to "anon";

grant select on table "public"."payment_details" to "anon";

grant trigger on table "public"."payment_details" to "anon";

grant truncate on table "public"."payment_details" to "anon";

grant update on table "public"."payment_details" to "anon";

grant delete on table "public"."payment_details" to "authenticated";

grant insert on table "public"."payment_details" to "authenticated";

grant references on table "public"."payment_details" to "authenticated";

grant select on table "public"."payment_details" to "authenticated";

grant trigger on table "public"."payment_details" to "authenticated";

grant truncate on table "public"."payment_details" to "authenticated";

grant update on table "public"."payment_details" to "authenticated";

grant delete on table "public"."payment_details" to "service_role";

grant insert on table "public"."payment_details" to "service_role";

grant references on table "public"."payment_details" to "service_role";

grant select on table "public"."payment_details" to "service_role";

grant trigger on table "public"."payment_details" to "service_role";

grant truncate on table "public"."payment_details" to "service_role";

grant update on table "public"."payment_details" to "service_role";

grant delete on table "public"."products" to "anon";

grant insert on table "public"."products" to "anon";

grant references on table "public"."products" to "anon";

grant select on table "public"."products" to "anon";

grant trigger on table "public"."products" to "anon";

grant truncate on table "public"."products" to "anon";

grant update on table "public"."products" to "anon";

grant delete on table "public"."products" to "authenticated";

grant insert on table "public"."products" to "authenticated";

grant references on table "public"."products" to "authenticated";

grant select on table "public"."products" to "authenticated";

grant trigger on table "public"."products" to "authenticated";

grant truncate on table "public"."products" to "authenticated";

grant update on table "public"."products" to "authenticated";

grant delete on table "public"."products" to "service_role";

grant insert on table "public"."products" to "service_role";

grant references on table "public"."products" to "service_role";

grant select on table "public"."products" to "service_role";

grant trigger on table "public"."products" to "service_role";

grant truncate on table "public"."products" to "service_role";

grant update on table "public"."products" to "service_role";

grant delete on table "public"."sub_categories" to "anon";

grant insert on table "public"."sub_categories" to "anon";

grant references on table "public"."sub_categories" to "anon";

grant select on table "public"."sub_categories" to "anon";

grant trigger on table "public"."sub_categories" to "anon";

grant truncate on table "public"."sub_categories" to "anon";

grant update on table "public"."sub_categories" to "anon";

grant delete on table "public"."sub_categories" to "authenticated";

grant insert on table "public"."sub_categories" to "authenticated";

grant references on table "public"."sub_categories" to "authenticated";

grant select on table "public"."sub_categories" to "authenticated";

grant trigger on table "public"."sub_categories" to "authenticated";

grant truncate on table "public"."sub_categories" to "authenticated";

grant update on table "public"."sub_categories" to "authenticated";

grant delete on table "public"."sub_categories" to "service_role";

grant insert on table "public"."sub_categories" to "service_role";

grant references on table "public"."sub_categories" to "service_role";

grant select on table "public"."sub_categories" to "service_role";

grant trigger on table "public"."sub_categories" to "service_role";

grant truncate on table "public"."sub_categories" to "service_role";

grant update on table "public"."sub_categories" to "service_role";

grant delete on table "public"."ticket_details" to "anon";

grant insert on table "public"."ticket_details" to "anon";

grant references on table "public"."ticket_details" to "anon";

grant select on table "public"."ticket_details" to "anon";

grant trigger on table "public"."ticket_details" to "anon";

grant truncate on table "public"."ticket_details" to "anon";

grant update on table "public"."ticket_details" to "anon";

grant delete on table "public"."ticket_details" to "authenticated";

grant insert on table "public"."ticket_details" to "authenticated";

grant references on table "public"."ticket_details" to "authenticated";

grant select on table "public"."ticket_details" to "authenticated";

grant trigger on table "public"."ticket_details" to "authenticated";

grant truncate on table "public"."ticket_details" to "authenticated";

grant update on table "public"."ticket_details" to "authenticated";

grant delete on table "public"."ticket_details" to "service_role";

grant insert on table "public"."ticket_details" to "service_role";

grant references on table "public"."ticket_details" to "service_role";

grant select on table "public"."ticket_details" to "service_role";

grant trigger on table "public"."ticket_details" to "service_role";

grant truncate on table "public"."ticket_details" to "service_role";

grant update on table "public"."ticket_details" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable read access for all users"
on "public"."categories"
as permissive
for select
to anon, authenticated
using (true);


create policy "Enable read access for all users"
on "public"."events"
as permissive
for select
to anon, authenticated
using (true);


create policy "Enable read access for all users"
on "public"."organizer_info"
as permissive
for select
to anon, authenticated
using (true);


create policy "Enable read access for all users"
on "public"."products"
as permissive
for select
to anon, authenticated
using (true);


create policy "Enable read access for all users"
on "public"."sub_categories"
as permissive
for select
to anon, authenticated
using (true);


create policy "Enable delete for users based on user_id"
on "public"."users"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable update for users based on email"
on "public"."users"
as permissive
for update
to authenticated
using (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email))
with check (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email));


create policy "Enable users to view their own data only"
on "public"."users"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = id));


CREATE TRIGGER before_insert_order BEFORE INSERT ON public.order_details FOR EACH ROW EXECUTE FUNCTION generate_custom_order_id();


